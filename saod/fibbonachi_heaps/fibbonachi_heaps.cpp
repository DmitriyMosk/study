#include "Header.h"
#include <chrono>


int main()
{
    struct node* min_node;
    struct fib_heap* heap;

    heap = (struct fib_heap*)malloc(sizeof(struct fib_heap));

    heap = make_heap();

    ifstream file("words.txt");


    char str[100];

    char* temp_word;

    for (int i = 0; i < 50000; i++)
    {
        file.getline(str, 100);

        temp_word = new char[strlen(str) + 1];

        strcpy(temp_word, str);

        FibHeapInsert(heap, i, temp_word);


        delete temp_word;
    }
    file.close();
    cout << "Count of element in heap: " << heap->n << endl;
    cout << "end" << endl;

    min_node = FibHeapDeleteMin(heap);

    //cout << min_node->value << endl;

    while (heap->n != 0)
    {
        FibHeapDeleteMin(heap);
    }

    cout << "heap is free" << endl;

}

/*

1) Максимальная степень узла в фибоначчиевой куче:
Максимальная степень узла в фибоначчиевой куче определяет максимальное количество дочерних узлов, которые может иметь данный узел.
В фибоначчиевой куче максимальная степень узла обычно ограничена логарифмом основания золотого сечения (приблизительно 1.618).
O(logn), n - количество узлов в куче

2) Добавление узла:
При добавлении нового узла в фибоначчиевую кучу, создается новое дерево с одним узлом и добавляется в список корней.
Затем происходит обновление указателей на минимальный узел, если добавленный узел имеет меньший приоритет.

3) Операция слияния двух куч:
При операции слияния двух фибоначчиевых куч, список корней одной кучи объединяется со списком корней другой кучи.
Затем происходит обновление указателя на минимальный узел, если необходимо.

4) Алгоритм удаления узла с наименьшим приоритетом (уплотнение списка корней — consolidate):
- Удаляется минимальный узел и его дочерние узлы становятся корневыми узлами.
- Происходит объединение деревьев с одинаковым количеством дочерних узлов.
- Обновляется указатель на минимальный узел.

5) Вычислительная сложность операций над фибоначчиевыми кучами:
- Вставка нового узла: O(1)
- Удаление узла с наименьшим приоритетом: O(log n), где n - количество узлов в куче
- Объединение двух куч: O(1)

6) Распространённость и области практического применения фибоначчиевых куч:
Фибоначчиевые кучи широко применяются в алгоритмах, где требуется эффективная реализация приоритетной очереди или
набора элементов с быстрым доступом к элементу с наименьшим приоритетом. Они также используются в алгоритмах поиска минимального остовного дерева,
алгоритмах кратчайшего пути, сжатии данных и других задачах, где требуется эффективная работа с набором элементов.

*/